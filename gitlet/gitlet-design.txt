Gitlet Design Document
----------------------


Classes and Data Structures
---------------------------
Main.java: The driver class for the gitlet directory. Takes in command lines and executes them if possible according to the validity of those commands.
    commands: a static string array that contains all possible commands to execute.
    _therepo: a static Repo variable that is the overall repo of the instance
    _thepath: a static final string variable that contains the path to that repo’s file
Repo.java: This class serves as my implementation of what is the “tree” of a typical gitlet repository. Will be the place where I have all my branches, staging areas, files, etc.
    _branches: a hashmap variable that contain all the branches of the repo.
    _head: a string variable that is my headpointer in my branches.
    _stagingArea: a hashmap that will serve as my holder area for files that need to updated.
    _untrackedFiles: an array list of strings that will hold the file names that are not being tracked in the gitlet repo.
Commit.java: The class that defines what a commit and contains the code for different parts of a commit object.
    _msg: a string variable for the commit message.
    _time: a string variable for the timestamp of the commit.
    _files: a hashmap that contains all the files that are being tracked.
    _parents: an array of strings containing hashes of parent commits.
    _unid: a string variable for the has of a commit.
    _dateForm: a java.text SimpleDateFormat variable.


Algorithms
----------
Main.java
    “main”: will interpret the command argument that has been given and calls on the correct method if possible. Throws an exception if no good command is given.
    “Validcomm”: check if the command, matches one of the system commands. Returns true if it does and false if it doesn’t.
    “execute”: a helper function that is called in main that calls the given valid command from the class of the command.
    “getRepo”: a simple function that returns the current repo object
    “getCommands”: a simple function to return the command string array.
Commit.java: This class will handle all the specifications and the creation of a commit.
    “Commit(String m, HashMap f, String[] p, boolean c)”: The initial constructor that will set the message, time, parents, create a new hashID for the commit, and create a date like object. It will also check if the given commit is an initial commit, if it is not it will create the timestamp with the current time and the timestamp with the default time if it is.
    “hashCommit()”: This function is designed to hash the current commit based on the commit message, files(if there are any), the timestamp, and parents.
    “getMsg()”: a helper function that returns the string message of the commit.
    “initCommit()”: a function that returns a commit with initial conditions.
    “getfiles()”: helper function that returns the instance Hashmap variable that contains all the files of a particular commit.
    “getTimestamp()”: helper function that returns the time stamp of the commit.
    “getParentID()”: helper function that returns the hashID of the first parent of this particular commit.
    “getParents()”: helper function that returns the universal ID for the particular commit.
Repo.java: This is the comprehensive class that handle all of the details regarding my repo and what happens when different kinds of gitlet commands are called on by the user.
    “Repo()”: This constructor will create a new Gitlet system in the current directory. This system will first start with one commit: a commit that contains no files. It will have a single branch at first called master, which initially point to this initial commit, and master will be the current branch. This use the Java.io.File  It will also initialize the staging area, untracked files list and other variables.
    “logCommits()”: Starting at the current head commit, it will display information about each commit backwards along the commit tree until the initial commit, following the first parent commit links, ignoring any second parents from merges. For every node in this history log, it should display the commit id, the time the commit was made, and the commit message.
    “printACommit(String id)”: takes in a hash id, prints out the commit, what it prints out depends on whether it is a merge commit or a regular commit.
    “add(String str)”: Takes in a string str. Checks if the file exists in the directory and throws an exception if it doesn’t. Then add the hash id of the file to the staging area if it is not there previously or it does then removes it from the staging area. Also removes from the untracked files arraylist if it was untracked before.
    “commit(String msg)”: Checks for a commit message first. Gets the most recent commit and get the files from the most recent commit. After that, adds the file to the hashset of files along with any from the staging area. Resets the parent commit and also the staging area.
    “commit(String msg, String[] parents)”: This function is like the previous commit function, but is used for merge commits, takes in a message, and a set of parents. It updates the file if needed according to the set of conditions listed in the spec.
    “rm(String arg)”: Unstages the file if it’s currently staged. If it is tracked in the current commit, mark it to be untracked in the next commit, and remove the file from the working directory if not done so already.
    “globalLog()”: Prints out all commits that have been made.
    “find(String msg)”: Looks through the commits so far and locates the ones with the given commit message and prints the names of these files.
    “status()”: For the branches, staged files, and removed files sections, it will print out each of the branch names, the names of the file that are staged, and the names that are removed. The last two sections will be left empty for now.
    “checkout(String[] args)”: It will first check the arguments if they are of valid length. After that, it will update the version of the file in the working directory as long as it was one of the tracked files. If not it will throw an exception.
    “convertShortenedID(String id)”: Takes in a shorted ID and returns a String of the full length.
    “checkout(String branchName)”: This will be similar to the other checkout function except that this is for the third case, where a branch name is given. Ir will follow the same procedures for the files in the given branch.
    “checkForuntracked(File pwd)”: This function takes in the present working directory and will determine if there are untracked files that mean that this checkout or merge operation can’t continue.
    “branch(String name)” : Makes a new branch in the repo tree structure, by adding it into the branches hashmap.
    “rmbranch(String name)”: This will check if the given branch is the current branch, and will error if it is. If not, it will remove the branch from the branches hashmap.
    “reset(String idstr)”: Given the id of a certain commit, this function will checkout all files under that commit and delete those that aren’t being tracked by the commit. It will also clear the staging area.
    “merge(String brname)”: This is the main function that will execute the merge operation between the current branch and the given branch and will give an exception if a merge conflict is encountered. It will also take care of the other merge conditions that middle merge did not check for and will give a mergeconflict exception if needed.
     “splitPoint(String branch1, String branch2)”: This will take in two branches and return the commit id that is shared ancestor of the two branches by tracing back the parents of the two branches. It will look through the parents and return the most recent shared ancestor.
    “modchk(String freq, HashMap<String, String> a1, HashMap<String, String> a2)”: Returns a boolean if the file has been modified from branch a1 to branch a2. This is a helper function that is to be used in the merge operation.
    “MergeConflict(String branchName, String fileName)”: If the file was merged different from the split point or from between the branches, or was absent at the point but is present in the branch, but essentially modified differently from the other branch, this will rewrite the file in the branch with the given correct content.
    “Middlemerge(String branchName)”: This function is designed to perform the intermediary step of merging the files of the given branch with the files in the current branch with the headpointer in the case of present in the given but is in the current and the case where it isn’t modified in the current but is in the given.

Persistence
-----------
1.The structure of my gitlet goes along the line of having three directories created from three files. One of them is called ``.gitlet”, which serves as  my main directory,
    and then there is a staging and a commits directory. The path name for each is “.gitlet/staging” and gitlet/commits respectively.
2. My main strategy for ensuring persistence is the idea of putting all the methods and data structures that relates to one particular repo and to one particular commit in its own class.
    That’s why I created one class for a commit object and a class for a repository object.
    This way, it will be easier to store the current state of each repo so that it persists across multiple method calls to the gitlet repo.
3. The way that that is executed is that first, if there is no gitlet repo in a given working directory, then a gitlet repo will be created with the pathname being .gitlet/myrepo.
    Then every time after that when a method is called, whether that be an add, or commit, or remove, or merge,
    my code will call the file that has that original pathname so that the info will stay the same.
    Then after completing the method call, my main will then convert all the contents into a new file that has the same pathname (.gitlet/myrepo).
4. Now every single call to the repository after that, the code will draw out the file that has that same pathname,
    execute whatever the given method call is, and then transfer the new contents into a new file of the same pathname.
5. This process that I have just described will thus ensure that the state of a particular repo will persist across multiple function calls
    no matter the case and won’t lose any of the changes made in the gitlet directory.
